//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASPClient.DonServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Student", Namespace="http://schemas.datacontract.org/2004/07/TestWCFLibrary")]
    [System.SerializableAttribute()]
    public partial class Student : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mark1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mark2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mark3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mark1 {
            get {
                return this.mark1Field;
            }
            set {
                if ((this.mark1Field.Equals(value) != true)) {
                    this.mark1Field = value;
                    this.RaisePropertyChanged("mark1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mark2 {
            get {
                return this.mark2Field;
            }
            set {
                if ((this.mark2Field.Equals(value) != true)) {
                    this.mark2Field = value;
                    this.RaisePropertyChanged("mark2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mark3 {
            get {
                return this.mark3Field;
            }
            set {
                if ((this.mark3Field.Equals(value) != true)) {
                    this.mark3Field = value;
                    this.RaisePropertyChanged("mark3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceUsers", Namespace="http://schemas.datacontract.org/2004/07/TestWCFLibrary")]
    [System.SerializableAttribute()]
    public partial class DeviceUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DonServiceReference.IServices")]
    public interface IServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetData", ReplyAction="http://tempuri.org/IServices/GetDataResponse")]
        string GetData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetData", ReplyAction="http://tempuri.org/IServices/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetMessage", ReplyAction="http://tempuri.org/IServices/GetMessageResponse")]
        string GetMessage(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetMessage", ReplyAction="http://tempuri.org/IServices/GetMessageResponse")]
        System.Threading.Tasks.Task<string> GetMessageAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetSorted", ReplyAction="http://tempuri.org/IServices/GetSortedResponse")]
        System.Collections.Generic.List<int> GetSorted(System.Collections.Generic.List<int> numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetSorted", ReplyAction="http://tempuri.org/IServices/GetSortedResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetSortedAsync(System.Collections.Generic.List<int> numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetResult", ReplyAction="http://tempuri.org/IServices/GetResultResponse")]
        string GetResult(string name, int mark1, int mark2, int mark3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetResult", ReplyAction="http://tempuri.org/IServices/GetResultResponse")]
        System.Threading.Tasks.Task<string> GetResultAsync(string name, int mark1, int mark2, int mark3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetTopper", ReplyAction="http://tempuri.org/IServices/GetTopperResponse")]
        ASPClient.DonServiceReference.Student GetTopper(System.Collections.Generic.List<ASPClient.DonServiceReference.Student> students);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetTopper", ReplyAction="http://tempuri.org/IServices/GetTopperResponse")]
        System.Threading.Tasks.Task<ASPClient.DonServiceReference.Student> GetTopperAsync(System.Collections.Generic.List<ASPClient.DonServiceReference.Student> students);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetUsers", ReplyAction="http://tempuri.org/IServices/GetUsersResponse")]
        System.Collections.Generic.List<ASPClient.DonServiceReference.DeviceUsers> GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetUsers", ReplyAction="http://tempuri.org/IServices/GetUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPClient.DonServiceReference.DeviceUsers>> GetUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicesChannel : ASPClient.DonServiceReference.IServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicesClient : System.ServiceModel.ClientBase<ASPClient.DonServiceReference.IServices>, ASPClient.DonServiceReference.IServices {
        
        public ServicesClient() {
        }
        
        public ServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData() {
            return base.Channel.GetData();
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync() {
            return base.Channel.GetDataAsync();
        }
        
        public string GetMessage(string name) {
            return base.Channel.GetMessage(name);
        }
        
        public System.Threading.Tasks.Task<string> GetMessageAsync(string name) {
            return base.Channel.GetMessageAsync(name);
        }
        
        public System.Collections.Generic.List<int> GetSorted(System.Collections.Generic.List<int> numbers) {
            return base.Channel.GetSorted(numbers);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetSortedAsync(System.Collections.Generic.List<int> numbers) {
            return base.Channel.GetSortedAsync(numbers);
        }
        
        public string GetResult(string name, int mark1, int mark2, int mark3) {
            return base.Channel.GetResult(name, mark1, mark2, mark3);
        }
        
        public System.Threading.Tasks.Task<string> GetResultAsync(string name, int mark1, int mark2, int mark3) {
            return base.Channel.GetResultAsync(name, mark1, mark2, mark3);
        }
        
        public ASPClient.DonServiceReference.Student GetTopper(System.Collections.Generic.List<ASPClient.DonServiceReference.Student> students) {
            return base.Channel.GetTopper(students);
        }
        
        public System.Threading.Tasks.Task<ASPClient.DonServiceReference.Student> GetTopperAsync(System.Collections.Generic.List<ASPClient.DonServiceReference.Student> students) {
            return base.Channel.GetTopperAsync(students);
        }
        
        public System.Collections.Generic.List<ASPClient.DonServiceReference.DeviceUsers> GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPClient.DonServiceReference.DeviceUsers>> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
    }
}
